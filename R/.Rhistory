# Creation: 21/01/2019
# Update:
#-------------------------------------------------------------------------------
##' @title Retrieves the data of a service from the WS2
##'
##' @description Create an URL to call the WS and retrun a formatted response of WSResponse class.
##' @param ressource the name of the service to call
##' @param paramPath the extension of the service to call, default to NULL
##' @param attributes The list of attributes to give to the GET request
##' @param type The type of the output, default to application/json
##' @param verbose logical FALSE by default, if TRUE display information about the progress
##' @keywords internal
#
# getResponseFromWS2<-function(resource, paramPath = NULL, attributes, type = "application/json", verbose = FALSE){
#   webserviceBaseUrl <- get("BASE_PATH", configWS)
#   urlParams <- ""
#   # url concatenation
#   for (attribut in names(attributes)) {
#     if (urlParams != ""){
#       urlParams <- paste0(urlParams, "&")
#     }
#     #     character arguments
#     if (is.character(attributes[[attribut]])){
#       urlParams <- paste0(urlParams, attribut, "=", utils::URLencode(attributes[[attribut]], reserved = TRUE))
#       #   numeric arguments
#     } else if (is.numeric(attributes[[attribut]])){
#       urlParams <- paste0(urlParams, attribut, "=", format(attributes[[attribut]], scientific = FALSE))
#       #   other arguments
#     } else {
#       urlParams <- paste0(urlParams, attribut, "=", attributes[[attribut]])
#     }
#   }
#   if (is.null(paramPath)){
#     finalurl <- paste0(webserviceBaseUrl, resource , "?", urlParams)
#   } else {
#     finalurl <- paste0(webserviceBaseUrl, resource , "/", paramPath, "?", urlParams)
#   }
#   print(finalurl)
#   ptm <- proc.time()
#   r <- httr::GET(finalurl, config = httr::add_headers(Authorization=paste("Bearer " ,attributes$Authorization, sep = "")))
#   if (verbose) {
#     print("Request Time : " )
#     print(proc.time() - ptm)
#     print(r)
#   }
#
#   if(r$status_code >= 500){
#     print("WebService internal error")
#   }
#   if(r$status_code == 401){
#     print("User not authorized")
#   }
#   if(r$status_code >= 400 && r$status_code != 401 &&  r$status_code < 500){
#     print("Bad user request")
#   }
#   if(r$status_code >= 200 && r$status_code < 300){
#     print("Query executed and data recovered")
#   }
#   return(getDataAndShowStatus(r))
# }
#-------------------------------------------------------------------------------
# Program: getVariables2.R
# Objective: functions called by the user on the web service Phenomeapi
# Authors: Hollebecq Jean-Eudes
# Creation: 21/01/2019
# Update:
#-------------------------------------------------------------------------------
##' @title getVariables
##'
##' @description Retrieves the variable descriptions, trait, method and unit covered by the variable
##' @param token a token from getToken function
##' @param uri Search by the uri of an experiment
##' @param label Search by label
##' @param trait Search by trait uri
##' @param method Search by method uri
##' @param unit Search variables by unit uri
##' @param page displayed page (pagination Plant Breeding API)
##' @param pageSize number of elements by page (pagination Plant Breeding API)
##' @param verbose logical FALSE by default, if TRUE display information about the progress
##' @return WSResponse object
##' @seealso http://docs.brapi.apiary.io/#introduction/url-structure
##' @details You have to execute the getToken() function first to have access to the web
##' service
##' @examples
##' \donttest{
##'  initializeClientConnection(apiID="ws_public")
##'  aToken = getToken("guestphis@supagro.inra.fr","guestphis")
##'  vars <- getVariablesByCategory(aToken$data,category="imagery",
##'           experimentURI = "http://www.phenome-fppn.fr/m3p/ARCH2012-01-01")
##'  vars$data
##' }
##' @export
getVariables2<-function(token,
uri = "",
label = "",
trait = "",
method = "",
unit = "",
pageSize = NULL,
page = NULL,
verbose = FALSE){
if (is.null(page)) page <- get("DEFAULT_PAGE",configWS)
if (is.null(pageSize)) pageSize <- get("DEFAULT_PAGESIZE",configWS)
attributes = list(pageSize=pageSize,
page = page)
if (uri!="")    attributes = c(attributes, uri = uri)
if (label!="")  attributes = c(attributes, lavel = label)
if (trait!="")  attributes = c(attributes, trait = trait)
if (method!="") attributes = c(attributes, method = method)
if (unit!="")   attributes = c(attributes, unit = unit)
variableResponse <- getResponseFromWS2(resource=paste0(get("VARIABLES", configWS)),
attributes = attributes,
verbose = verbose,
authorization = token)
return(variableResponse)
}
configWS<-new.env(emptyenv())
assign("PUBLIC_PATH","http://147.100.179.156:8080/phenomeapi/resources/", configWS)
assign("BASE_PATH","", configWS)
# WS phis1
assign("TOKEN", "token", configWS)
assign("EXPERIMENT", "experiments", configWS)
assign("VARIABLES", "variables", configWS)
assign("PLANTS", "plants", configWS)
assign("IMAGESANALYSIS", "imagesAnalysis", configWS)
assign("PHENOTYPES", "phenotypes", configWS)
assign("WATERING", "watering", configWS)
# WS phis2
assign("BRAPITOKEN", "brapi/v1/token", configWS)
assign("AGROOBJECTS", "agronomicalObjects", configWS)
assign("DATASETS", "datasets", configWS)
assign("ANNOTATIONS", "annotations", configWS)
assign("ENVIRONMENTS", "environments", configWS)
# commun
assign("VARIABLES", "variables", configWS)
assign("ENVIRONMENT", "environment", configWS)
assign("PROJECTS", "projects", configWS)
assign("DEFAULT_PAGE", 0, configWS)
assign("DEFAULT_PAGESIZE", 100, configWS)
###############################################################################
################################### A FAIRE ###################################
###############################################################################
###     Ajouter de l'interactivitÃ©:                                         ###
### * recherche d'outliers                                                  ###
### * pouvoir changer les informations de ce point                          ###
###                                                                         ###
###   sources:                                                              ###
### * http://users.auth.gr/~prinosp/downloads/Galiatsatou_PAPER_416.pdf     ###
###############################################################################
###############################################################################
###############################################################################
##' @title plot.var
##'
##' @importFrom magrittr %>%
##' @importFrom plotly layout
##' @importFrom plotly plot_ly
##' @importFrom plotly add_trace
##'
##' @param nomVar (list) name of the variable to plot
##' @param startDate (date format %Y-%m-%d) date from which to plot
##' @param endDate (date format %Y-%m-%d) date to which to plot
##' @param sensor (number) sensor's name that recorded the values
##' @param token (string) a token from getToken function
##'
##' @return
##'
##' @examples
##' \donttest{
##'  initializeClientConnection(apiID="ws_private", url = "138.102.159.36:8080/uesAPI/rest/")
##'  aToken <- getToken("guest@phis.fr","guest")
##'  token <- aToken$data
##'  plotVar("temperature", token = token)
##'  plotVar("temperature", token = token, sensor = "s18002")
##'  plotVar("temperature", startDate = "2017-06-26", endDate = "2017-06-28", sensor = "s18002", token = token)
##' }
##'
##' @export
##'
plotVar <- function(nameVar, startDate = NULL, endDate = NULL, sensor = NULL, token){
startDate = NULL
endDate = NULL
## Data recuperation
# variable's informations
varPrettyTot <- getVarPretty(token = token)
Data <- NULL
varPretty <- NULL
# Chosen variable
for (i in 1: length(nameVar)){
nameString <- toString(nameVar[i])
varMeth <- strsplit(nameString, split="_")
methodVar <- varMeth[[1]][2]
subNameVar <- varMeth[[1]][1]
# Recuperation of the data from the WS
enviroData <- getDataVarPretty(nameVar = subNameVar, methodVar = methodVar, varPretty = varPrettyTot, token = token)
print(enviroData$varPretty)
varPretty <- cbind(varPretty, enviroData$varPretty)
enviroData <- enviroData$enviroData
# Values
yVar <- enviroData$value
if (i == 1){
xVar <- as.POSIXct(enviroData$date, tz = "UTC", format = "%Y-%m-%dT%H:%M:%S")
}
Data <- cbind(Data, y = yVar)
}
# Chosen sensor
if(!is.null(sensor)){
sensorsNames <- enviroData$sensorUri
for (i in 1:length(sensorsNames)){
sensorName <- strsplit(sensorsNames[i], split="/")
sensorsNames[i] <- sensorName[[1]][6]
}
Data$sensorsNames <- sensorsNames
Data <- Data[which(Data$sensorsNames == sensor),]
}
# Chosen dates
if(!is.null(startDate)){
startDate <- as.POSIXct(startDate, tz = "UTC", format = "%Y-%m-%d")
Data <- Data[which(Data$x >= startDate),]
}
if (!is.null(endDate)){
endDate <- as.POSIXct(endDate, tz = "UTC", format = "%Y-%m-%d")
Data <- Data[which(Data$x <= endDate),]
}
## Plotting
# Labels
y <- list(title = paste('<b>', varPretty[1,1], ' (',varPretty[4,1], ')' , '</b>', sep = ""), color = '#282828',
tickfont = list(family = 'serif'), gridwidth = 2)
x <- list(title = '<b>Time</b>', tickfont = list(family = 'serif'), gridwidth = 2)
title <- list(size = 20, color = '#282828', tickfont = list(family = 'serif'))
# Plot
p <- plotly::plot_ly(type = 'scatter', mode = 'lines+markers')
p <- plotly::layout(p, xaxis = x, yaxis = y,
titlefont = title,
legend = list(x = 0.80, y = 1.1),
margin = list(l = 60, r = 70, t = 70, b =  60))
# Legend
for (i in 1:(length(nameVar))){
nameY <- paste('y', i, sep = "")
p <- plotly::add_trace(p, x = xVar, y = Data[, i], name = varPretty[1,i], yaxis = nameY,
text = ~paste("<b>", varPretty[3,i], ': ', Data[,i], varPretty[4,i], '</b><br>', xVar), hoverinfo = 'text')
}
if (length(nameVar) == 1){
p <- plotly::layout(p, title = paste('<b>Tendency of ', varPretty[1,1],'</b><br><i>', varPretty[2,1],'</i>' , sep = ""))
} else if (i == 2) {
y <- list(title = paste('<b>', varPretty[1,2], ' (',varPretty[4,2], ')' , '</b>', sep = ""), color = '#282828', showgrid = FALSE,
gridwidth = 2,  tickfont = list(family = 'serif'), overlaying = "y", side = "right")
p <- plotly::layout(p, yaxis2 = y)
p <- plotly::layout(p, title = "<b>Tendency of environmental variables among time</br>")
} else {
y <- list(title = paste('<b>', varPretty[1,2], ' (',varPretty[4,2], ')' , '</b>', sep = ""), color = '#282828', showgrid = FALSE,
gridwidth = 2,  tickfont = list(family = 'serif'), overlaying = "y", side = "right")
p <- plotly::layout(p, yaxis = y)
p <- plotly::layout(p, title = "<b>Tendency of environmental variables among time</br>")
}
return(p)
#htmlwidgets::saveWidget(p, "test1var.html", selfcontained = FALSE)
}
##' @title getVarPretty
##'
##' @importFrom phisWSClientR initializeClientConnection
##' @importFrom phisWSClientR getEnvironmentData
##'
##' @param token (string) a token from getToken function
##'
##' @return
##' @export
##'
##' @examples
##' \donttest{
##' initializeClientConnection(apiID="ws_private", url = "138.102.159.36:8080/uesAPI/rest/")
##'  aToken <- getToken("guest@phis.fr","guest")
##'  token <- aToken$data
##'  getVarPretty(token = token)
##' }
getVarPretty <- function(token){
phisWSClientR::initializeClientConnection(apiID="ws_private", url = "138.102.159.36:8080/uesAPI/rest/")
rawVar <- phisWSClientR::getVariables2(token = token)
names <- rawVar$data$label
methods <- rawVar$data$label
for (i in 1:length(names)){
names[i] <- strsplit(names[i], split="_")[[1]][1]
methods[i] <- strsplit(methods[i], split="_")[[1]][2]
}
acronyms <- rawVar$data$trait$label
unitVar <- rawVar$data$unit$comment
varPretty <- data.frame(name = names, method = methods, acronym = acronyms, unity = unitVar)
return(varPretty)
}
##' @title getDataVarPretty
##'
##' @importFrom phisWSClientR initializeClientConnection
##' @importFrom phisWSClientR getVariables2
##'
##' @param nameVar (string) name of the variable to plot
##' @param methodVar (string) name of the method used to collect data
##' @param varPretty (data.frame) from getVarPretty
##' @param token (string) a token from getToken function
##'
##' @return
##' @export
##'
##' @examples
##' \donttest{
##' initializeClientConnection(apiID="ws_private", url = "138.102.159.36:8080/uesAPI/rest/")
##'  aToken <- getToken("guest@phis.fr","guest")
##'  token <- aToken$data
##'  varPrettyTot <- getVarPretty(token = token)
##'  getDataVarPretty(nameVar = "temperature", varPretty = varPrettyTot, token = token)
##' }
getDataVarPretty <- function(nameVar, methodVar = NULL, varPretty, token) {
phisWSClientR::initializeClientConnection(apiID="ws_private", url = "138.102.159.36:8080/uesAPI/rest/")
if(!is.null(methodVar) && !is.na(methodVar)){
numVar <- 1
while(grepl(methodVar, varPretty$method[numVar]) == FALSE && numVar < dim(varPretty)[1]){
numVar <- numVar+1
}
} else {
numVar <- match(nameVar, varPretty$name)
}
zero <- rep('0', 3-length(numVar))
nameUriVar <- paste(paste(zero, collapse=''), numVar, sep  = "")
# Recuperation of the data from the WS
myCount <- phisWSClientR::getEnvironmentData(token = token, variable = paste("http://www.phenome-fppn.fr/ues/id/variables/v", nameUriVar, sep = ""))$totalCount
enviroData <- phisWSClientR::getEnvironmentData(token=token, variable = paste("http://www.phenome-fppn.fr/ues/id/variables/v", nameUriVar, sep = "") , verbose = TRUE, pageSize = myCount)$data
nomVar <- paste(toupper(substr(levels(droplevels(varPretty$name[numVar])),1,1)), substr(levels(droplevels(varPretty$name[numVar])),2,nchar(levels(droplevels(varPretty$name[numVar])))), sep = "")
methodVar <- levels(droplevels(varPretty$method[numVar]))
acronymVar <- levels(droplevels(varPretty$acronym[numVar]))
unityVar <- levels(droplevels(varPretty$unity[numVar]))
varPretty <- list(name = nomVar, method = methodVar, acronym = acronymVar, unity = unityVar)
return(list(enviroData = enviroData, varPretty = varPretty))
}
token <- "5c21b997f90ce43dc4dbb9fe460fe1c7"
p <- plotVar("temperature", token = token)
p
p
token <- "5c21b997f90ce43dc4dbb9fe460fe1c7"
p <- plotVar("temperature", token = token)
p2 <- plotVar(c("temperature", "wind"), token = token)
p2
token <- "5c21b997f90ce43dc4dbb9fe460fe1c7"
p <- plotVar("temperature", token = token)
p2 <- plotVar(c("temperature", "wind"), token = token)
p3 <- plotVar(c("temperature", "wind", "radiation"), token = token)
p3
token <- "5c21b997f90ce43dc4dbb9fe460fe1c7"
## Data recuperation
# variable's informations
varPrettyTot <- getVarPretty(token = token)
# Chosen variable
for (i in 1: length(nameVar)){
nameString <- toString(nameVar[i])
varMeth <- strsplit(nameString, split="_")
methodVar <- varMeth[[1]][2]
subNameVar <- varMeth[[1]][1]
# Recuperation of the data from the WS
enviroData <- getDataVarPretty(nameVar = subNameVar, methodVar = methodVar, varPretty = varPrettyTot, token = token)
print(enviroData$varPretty)
varPretty <- cbind(varPretty, enviroData$varPretty)
enviroData <- enviroData$enviroData
# Values
yVar <- enviroData$value
if (i == 1){
xVar <- as.POSIXct(enviroData$date, tz = "UTC", format = "%Y-%m-%dT%H:%M:%S")
}
Data <- cbind(Data, y = yVar)
}
nameVar <- "wind"
## Data recuperation
# variable's informations
varPrettyTot <- getVarPretty(token = token)
# Chosen variable
for (i in 1: length(nameVar)){
nameString <- toString(nameVar[i])
varMeth <- strsplit(nameString, split="_")
methodVar <- varMeth[[1]][2]
subNameVar <- varMeth[[1]][1]
# Recuperation of the data from the WS
enviroData <- getDataVarPretty(nameVar = subNameVar, methodVar = methodVar, varPretty = varPrettyTot, token = token)
print(enviroData$varPretty)
varPretty <- cbind(varPretty, enviroData$varPretty)
enviroData <- enviroData$enviroData
# Values
yVar <- enviroData$value
if (i == 1){
xVar <- as.POSIXct(enviroData$date, tz = "UTC", format = "%Y-%m-%dT%H:%M:%S")
}
Data <- cbind(Data, y = yVar)
}
library(webapp)
## Data recuperation
# variable's informations
varPrettyTot <- getVarPretty(token = token)
# Chosen variable
for (i in 1: length(nameVar)){
nameString <- toString(nameVar[i])
varMeth <- strsplit(nameString, split="_")
methodVar <- varMeth[[1]][2]
subNameVar <- varMeth[[1]][1]
# Recuperation of the data from the WS
enviroData <- getDataVarPretty(nameVar = subNameVar, methodVar = methodVar, varPretty = varPrettyTot, token = token)
print(enviroData$varPretty)
varPretty <- cbind(varPretty, enviroData$varPretty)
enviroData <- enviroData$enviroData
# Values
yVar <- enviroData$value
if (i == 1){
xVar <- as.POSIXct(enviroData$date, tz = "UTC", format = "%Y-%m-%dT%H:%M:%S")
}
Data <- cbind(Data, y = yVar)
}
varPrettyTot <- getVarPretty(token = token)
getDataVarPretty(nameVar = "temperature", varPretty = varPrettyTot, token = token
)
# Chosen variable
for (i in 1: length(nameVar)){
nameString <- toString(nameVar[i])
varMeth <- strsplit(nameString, split="_")
methodVar <- varMeth[[1]][2]
subNameVar <- varMeth[[1]][1]
# Recuperation of the data from the WS
enviroData <- getDataVarPretty(nameVar = subNameVar, methodVar = methodVar, varPretty = varPrettyTot, token = token)
print(enviroData$varPretty)
varPretty <- cbind(varPretty, enviroData$varPretty)
enviroData <- enviroData$enviroData
# Values
yVar <- enviroData$value
if (i == 1){
xVar <- as.POSIXct(enviroData$date, tz = "UTC", format = "%Y-%m-%dT%H:%M:%S")
}
Data <- cbind(Data, y = yVar)
}
varPretty <- varPrettyTot
# Chosen variable
for (i in 1: length(nameVar)){
nameString <- toString(nameVar[i])
varMeth <- strsplit(nameString, split="_")
methodVar <- varMeth[[1]][2]
subNameVar <- varMeth[[1]][1]
# Recuperation of the data from the WS
enviroData <- getDataVarPretty(nameVar = subNameVar, methodVar = methodVar, varPretty = varPrettyTot, token = token)
print(enviroData$varPretty)
varPretty <- cbind(varPretty, enviroData$varPretty)
enviroData <- enviroData$enviroData
# Values
yVar <- enviroData$value
if (i == 1){
xVar <- as.POSIXct(enviroData$date, tz = "UTC", format = "%Y-%m-%dT%H:%M:%S")
}
Data <- cbind(Data, y = yVar)
}
enviroData <- getDataVarPretty(nameVar = nameVar,, varPretty = varPrettyTot, token = token)
print(enviroData$varPretty)
varPretty <- cbind(varPretty, enviroData$varPretty)
enviroData <- enviroData$enviroData
# Values
yVar <- enviroData$value
if (i == 1){
xVar <- as.POSIXct(enviroData$date, tz = "UTC", format = "%Y-%m-%dT%H:%M:%S")
}
Data <- cbind(Data, y = yVar)
# Chosen sensor
if(!is.null(sensor)){
sensorsNames <- enviroData$sensorUri
for (i in 1:length(sensorsNames)){
sensorName <- strsplit(sensorsNames[i], split="/")
sensorsNames[i] <- sensorName[[1]][6]
}
Data$sensorsNames <- sensorsNames
Data <- Data[which(Data$sensorsNames == sensor),]
}
# Chosen dates
if(!is.null(startDate)){
startDate <- as.POSIXct(startDate, tz = "UTC", format = "%Y-%m-%d")
Data <- Data[which(Data$x >= startDate),]
}
if (!is.null(endDate)){
endDate <- as.POSIXct(endDate, tz = "UTC", format = "%Y-%m-%d")
Data <- Data[which(Data$x <= endDate),]
}
## Plotting
# Labels
y <- list(title = paste('<b>', varPretty[1,1], ' (',varPretty[4,1], ')' , '</b>', sep = ""), color = '#282828',
tickfont = list(family = 'serif'), gridwidth = 2)
x <- list(title = '<b>Time</b>', tickfont = list(family = 'serif'), gridwidth = 2)
title <- list(size = 20, color = '#282828', tickfont = list(family = 'serif'))
# Plot
p <- plotly::plot_ly(type = 'scatter', mode = 'lines+markers')
p <- plotly::layout(p, xaxis = x, yaxis = y,
titlefont = title,
legend = list(x = 0.80, y = 1.1),
margin = list(l = 60, r = 70, t = 70, b =  60))
# Legend
for (i in 1:(length(nameVar))){
nameY <- paste('y', i, sep = "")
p <- plotly::add_trace(p, x = xVar, y = Data[, i], name = varPretty[1,i], yaxis = nameY,
text = ~paste("<b>", varPretty[3,i], ': ', Data[,i], varPretty[4,i], '</b><br>', xVar), hoverinfo = 'text')
}
if (length(nameVar) == 1){
p <- plotly::layout(p, title = paste('<b>Tendency of ', varPretty[1,1],'</b><br><i>', varPretty[2,1],'</i>' , sep = ""))
} else if (i == 2) {
y <- list(title = paste('<b>', varPretty[1,2], ' (',varPretty[4,2], ')' , '</b>', sep = ""), color = '#282828', showgrid = FALSE,
gridwidth = 2,  tickfont = list(family = 'serif'), overlaying = "y", side = "right")
p <- plotly::layout(p, yaxis2 = y)
p <- plotly::layout(p, title = "<b>Tendency of environmental variables among time</br>")
} else {
y <- list(title = paste('<b>', varPretty[1,2], ' (',varPretty[4,2], ')' , '</b>', sep = ""), color = '#282828', showgrid = FALSE,
gridwidth = 2,  tickfont = list(family = 'serif'), overlaying = "y", side = "right")
p <- plotly::layout(p, yaxis = y)
p <- plotly::layout(p, title = "<b>Tendency of environmental variables among time</br>")
}
p
plotVar("temperature", token = token)
